第一题（范围查询）：
先写一个快排将输入的n个数按升序排列，然后再写一个二分查找，找每一个区间的左右端点在这个升序数列的位置，
返回不大于该区间端点的最大序号(如果小于s[0]，返回的最大序号为-1),将左右端点的返回值作差后加1（闭区间）即
为所求，最后再单独写返回值为-1的情况即可。总体时间复杂度为mlogn+nlongn=（m+n）logn；

第二题（真二叉树重构）：
写了一个通过先序遍历和后序遍历重构该真二叉树的函数build，原理是先序遍历特点为(P=parent,R=rson,L=lson)：
PL … R …  结合后序遍历特点：… L … RP，先序遍历中P的右邻总是左孩子和左子树，后续遍历中P的左邻总是左孩子
和左子树，依据这一特点可以通过递归的方式将该真二叉树重构：
void build(int root,int p1,int p2,int l1,int l2)
{
	if(p1==p2)return ;//该子树只有一个节点==>叶子节点
	l[root] = pre [p1+1];r[root] = last[l2-1];//*pre先序遍历数列；*last后序遍历数列；l左孩子；r右孩子；
	build(l[root],p1+1,lastid[l[root]]-l1+p1+1,l1,lastid[l[root]]);//lastid[p]节点p在后序遍历中的序号
	build(r[root],lastid[l[root]]+p1+2-l1,p2,lastid[l[root]]+1,l2-1);
}
//root 待重建子树的根 ； p1，p2，待重建子树在先序遍历中的位置；l1，l2，待重建子树在后序遍历中的位置；
通过build函数重构完树以后，将树中序输出即可：
void print(int root){
	if(root){
		print(l[root]);
		printf("%d ",root);
		print(r[root]);
	}
}

第三题（游戏）
先将C当成A，然后从左往右遍历，A入栈，遇B则A出栈，若存在B没有相应的A与之配对，则同学胜出；
再把C当成B，然后从右往左遍历，B入栈，遇A则B出栈，若存在A没有相应的B与之配对，则同学胜出；
若以上两条都满足，老师胜出，输出True，反之，输出False。







